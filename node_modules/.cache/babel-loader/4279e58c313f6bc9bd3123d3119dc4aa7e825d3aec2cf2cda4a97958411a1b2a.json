{"ast":null,"code":"import { findZipLocation } from './zip-checker';\nimport { estimateDrivingTime, findDrivingTime } from './estimate-time-driving';\nimport { findAllResorts } from './all-avail-resorts';\nconst DEFAULT_LOCATIONS = {\n  \"Midwest\": {\n    latitude: 41.8781,\n    longitude: -87.6298\n  },\n  // Chicago\n  \"Rockies\": {\n    latitude: 39.7392,\n    longitude: -104.9903\n  },\n  // Denver\n  \"Northeast\": {\n    latitude: 40.7128,\n    longitude: -74.0060\n  },\n  // New York\n  \"Midatlantic\": {\n    latitude: 39.9526,\n    longitude: -75.1652\n  },\n  // Philly\n  \"West\": {\n    latitude: 34.1030,\n    longitude: -118.4105\n  } // 90210 like the song haha\n};\nexport function calculateResortsDriving(region, zipCode) {\n  let usersLocation = findZipLocation(zipCode) || DEFAULT_LOCATIONS[region] || DEFAULT_LOCATIONS[\"West\"];\n  const resorts = findAllResorts(region);\n  return resorts.map(resort => ({\n    ...resort,\n    drivingTime: estimateDrivingTime(usersLocation.latitude, usersLocation.longitude, resort.latitude, resort.longitude),\n    totalKm: findDrivingTime(usersLocation.latitude, usersLocation.longitude, resort.latitude, resort.longitude)\n  }));\n}","map":{"version":3,"names":["findZipLocation","estimateDrivingTime","findDrivingTime","findAllResorts","DEFAULT_LOCATIONS","latitude","longitude","calculateResortsDriving","region","zipCode","usersLocation","resorts","map","resort","drivingTime","totalKm"],"sources":["/Users/nathantamari/Desktop/React-Projects/ski/src/scripts/drivingTimeLogic.js"],"sourcesContent":["import { findZipLocation } from './zip-checker';\nimport { estimateDrivingTime, findDrivingTime } from './estimate-time-driving';\nimport { findAllResorts } from './all-avail-resorts';\n\nconst DEFAULT_LOCATIONS = {\n  \"Midwest\": { latitude: 41.8781, longitude: -87.6298 }, // Chicago\n  \"Rockies\": { latitude: 39.7392, longitude: -104.9903 }, // Denver\n  \"Northeast\": { latitude: 40.7128, longitude: -74.0060 }, // New York\n  \"Midatlantic\": { latitude: 39.9526, longitude: -75.1652 }, // Philly\n  \"West\": { latitude: 34.1030, longitude: -118.4105 } // 90210 like the song haha\n};\n\nexport function calculateResortsDriving(region, zipCode) {\n    let usersLocation = findZipLocation(zipCode) || DEFAULT_LOCATIONS[region] || DEFAULT_LOCATIONS[\"West\"];\n    const resorts = findAllResorts(region);\n    return resorts.map(resort => ({\n        ...resort,\n        drivingTime: estimateDrivingTime(usersLocation.latitude, usersLocation.longitude, resort.latitude, resort.longitude),\n        totalKm: findDrivingTime(usersLocation.latitude, usersLocation.longitude, resort.latitude, resort.longitude) \n      }));\n}"],"mappings":"AAAA,SAASA,eAAe,QAAQ,eAAe;AAC/C,SAASC,mBAAmB,EAAEC,eAAe,QAAQ,yBAAyB;AAC9E,SAASC,cAAc,QAAQ,qBAAqB;AAEpD,MAAMC,iBAAiB,GAAG;EACxB,SAAS,EAAE;IAAEC,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,CAAC;EAAQ,CAAC;EAAE;EACvD,SAAS,EAAE;IAAED,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,CAAC;EAAS,CAAC;EAAE;EACxD,WAAW,EAAE;IAAED,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,CAAC;EAAQ,CAAC;EAAE;EACzD,aAAa,EAAE;IAAED,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,CAAC;EAAQ,CAAC;EAAE;EAC3D,MAAM,EAAE;IAAED,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,CAAC;EAAS,CAAC,CAAC;AACtD,CAAC;AAED,OAAO,SAASC,uBAAuBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACrD,IAAIC,aAAa,GAAGV,eAAe,CAACS,OAAO,CAAC,IAAIL,iBAAiB,CAACI,MAAM,CAAC,IAAIJ,iBAAiB,CAAC,MAAM,CAAC;EACtG,MAAMO,OAAO,GAAGR,cAAc,CAACK,MAAM,CAAC;EACtC,OAAOG,OAAO,CAACC,GAAG,CAACC,MAAM,KAAK;IAC1B,GAAGA,MAAM;IACTC,WAAW,EAAEb,mBAAmB,CAACS,aAAa,CAACL,QAAQ,EAAEK,aAAa,CAACJ,SAAS,EAAEO,MAAM,CAACR,QAAQ,EAAEQ,MAAM,CAACP,SAAS,CAAC;IACpHS,OAAO,EAAEb,eAAe,CAACQ,aAAa,CAACL,QAAQ,EAAEK,aAAa,CAACJ,SAAS,EAAEO,MAAM,CAACR,QAAQ,EAAEQ,MAAM,CAACP,SAAS;EAC7G,CAAC,CAAC,CAAC;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}