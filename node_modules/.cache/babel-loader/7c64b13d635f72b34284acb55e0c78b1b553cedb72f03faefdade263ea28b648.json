{"ast":null,"code":"function findDrivingTime(lat1, long1, lat2, long2) {\n  const R = 6371;\n  const toRad = angle => angle * Math.PI / 180;\n  const dLat = toRad(lat2 - lat1);\n  const dLong = toRad(long2 - long1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLong / 2) * Math.sin(dLong / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in km\n}\nexport function estimateDrivingTime(lat1, long1, lat2, long2, avgSpeed = 80) {\n  const distance = findDrivingTime(lat1, long1, lat2, long2);\n  const drivingTimeHours = distance / avgSpeed;\n  const totalMins = Math.round(drivingTimeHours * 60 / 15) * 15;\n  const hours = Math.floor(totalMins / 60);\n  const minutes = totalMins % 60;\n  if (hours > 0 && minutes > 0) return `${hours} hr ${minutes} min.`;else if (hours > 0) return `${hours}.`;else return `${minutes} min.`;\n  return distance / avgSpeed;\n}","map":{"version":3,"names":["findDrivingTime","lat1","long1","lat2","long2","R","toRad","angle","Math","PI","dLat","dLong","a","sin","cos","c","atan2","sqrt","estimateDrivingTime","avgSpeed","distance","drivingTimeHours","totalMins","round","hours","floor","minutes"],"sources":["/Users/nathantamari/Desktop/React-Projects/ski/src/scripts/estimate-time-driving.js"],"sourcesContent":["function findDrivingTime(lat1, long1, lat2, long2) {\n    const R = 6371;\n    const toRad = angle => (angle * Math.PI) / 180;\n\n    const dLat = toRad(lat2 - lat1);\n    const dLong = toRad(long2-long1);  \n\n    const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n    Math.sin(dLong / 2) * Math.sin(dLong / 2);\n\nconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\nreturn R * c; // Distance in km\n}\n\nexport function estimateDrivingTime (lat1, long1, lat2, long2, avgSpeed=80) {\n    const distance = findDrivingTime(lat1, long1, lat2, long2);\n    const drivingTimeHours = distance/avgSpeed;\n    const totalMins = Math.round(drivingTimeHours*60 / 15 ) * 15;\n    const hours = Math.floor(totalMins / 60);\n    const minutes = totalMins % 60;\n\n\n    if (hours > 0 && minutes > 0) return `${hours} hr ${minutes} min.`;\n    else if (hours > 0) return `${hours}.`;\n    else return `${minutes} min.`\n    return (distance / avgSpeed);\n}"],"mappings":"AAAA,SAASA,eAAeA,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC/C,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAGC,KAAK,IAAKA,KAAK,GAAGC,IAAI,CAACC,EAAE,GAAI,GAAG;EAE9C,MAAMC,IAAI,GAAGJ,KAAK,CAACH,IAAI,GAAGF,IAAI,CAAC;EAC/B,MAAMU,KAAK,GAAGL,KAAK,CAACF,KAAK,GAACF,KAAK,CAAC;EAEhC,MAAMU,CAAC,GACPJ,IAAI,CAACK,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACK,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC,GACvCF,IAAI,CAACM,GAAG,CAACR,KAAK,CAACL,IAAI,CAAC,CAAC,GAAGO,IAAI,CAACM,GAAG,CAACR,KAAK,CAACH,IAAI,CAAC,CAAC,GAC7CK,IAAI,CAACK,GAAG,CAACF,KAAK,GAAG,CAAC,CAAC,GAAGH,IAAI,CAACK,GAAG,CAACF,KAAK,GAAG,CAAC,CAAC;EAE7C,MAAMI,CAAC,GAAG,CAAC,GAAGP,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACS,IAAI,CAACL,CAAC,CAAC,EAAEJ,IAAI,CAACS,IAAI,CAAC,CAAC,GAAGL,CAAC,CAAC,CAAC;EACxD,OAAOP,CAAC,GAAGU,CAAC,CAAC,CAAC;AACd;AAEA,OAAO,SAASG,mBAAmBA,CAAEjB,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEe,QAAQ,GAAC,EAAE,EAAE;EACxE,MAAMC,QAAQ,GAAGpB,eAAe,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC;EAC1D,MAAMiB,gBAAgB,GAAGD,QAAQ,GAACD,QAAQ;EAC1C,MAAMG,SAAS,GAAGd,IAAI,CAACe,KAAK,CAACF,gBAAgB,GAAC,EAAE,GAAG,EAAG,CAAC,GAAG,EAAE;EAC5D,MAAMG,KAAK,GAAGhB,IAAI,CAACiB,KAAK,CAACH,SAAS,GAAG,EAAE,CAAC;EACxC,MAAMI,OAAO,GAAGJ,SAAS,GAAG,EAAE;EAG9B,IAAIE,KAAK,GAAG,CAAC,IAAIE,OAAO,GAAG,CAAC,EAAE,OAAO,GAAGF,KAAK,OAAOE,OAAO,OAAO,CAAC,KAC9D,IAAIF,KAAK,GAAG,CAAC,EAAE,OAAO,GAAGA,KAAK,GAAG,CAAC,KAClC,OAAO,GAAGE,OAAO,OAAO;EAC7B,OAAQN,QAAQ,GAAGD,QAAQ;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}