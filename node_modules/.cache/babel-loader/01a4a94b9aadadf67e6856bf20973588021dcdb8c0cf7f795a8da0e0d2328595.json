{"ast":null,"code":"var _jsxFileName = \"/Users/nathantamari/Desktop/React-Projects/ski/src/components/Dropdown.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport './Dropdown.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dropdown({\n  name,\n  onChange,\n  label\n}) {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleDropDown = () => setIsOpen(prev => !prev);\n  const [message, setMessage] = useState(\"Choose Option\");\n  const dropdownRef = useRef(null);\n  const changeMessage = m => {\n    setMessage(m);\n    setIsOpen(false);\n    onchange(props.name, m);\n  };\n  useEffect(() => {\n    const handleOutsideClick = e => {\n      if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleOutsideClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleOutsideClick);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-container\",\n    ref: dropdownRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: props.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"dropdown-button\",\n        onClick: toggleDropDown,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dropdown-menu\",\n        children: props.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"element\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"element-button\",\n            onClick: () => changeMessage(option),\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"hidden\",\n        name: props.name,\n        value: props.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(Dropdown, \"bIZplgJuIe834aoYeCgajoja/d0=\");\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","Dropdown","name","onChange","label","_s","isOpen","setIsOpen","toggleDropDown","prev","message","setMessage","dropdownRef","changeMessage","m","onchange","props","handleOutsideClick","e","current","contains","target","document","addEventListener","removeEventListener","className","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","options","map","option","index","value","_c","$RefreshReg$"],"sources":["/Users/nathantamari/Desktop/React-Projects/ski/src/components/Dropdown.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport './Dropdown.css';\n\nfunction Dropdown({ name, onChange, label}) {\n    const[isOpen, setIsOpen] = useState(false);\n    const toggleDropDown = () => setIsOpen((prev)=> !prev);\n    const [message, setMessage] = useState(\"Choose Option\");\n    const dropdownRef = useRef(null);\n\n\n    const changeMessage = (m) => {\n        setMessage(m);\n        setIsOpen(false);\n        onchange(props.name, m);\n    }\n\n    useEffect(() => {\n        const handleOutsideClick = (e) => {\n            if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {\n                setIsOpen(false);\n            }\n        };\n        document.addEventListener(\"mousedown\", handleOutsideClick);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleOutsideClick);\n        };\n\n\n\n    }, []);\n\n    return ( \n        <div className=\"dropdown-container\" ref={dropdownRef}>\n            <div className=\"dropdown\">\n                <label><h3>{props.label}</h3></label>\n                <button type=\"button\" className=\"dropdown-button\" onClick={toggleDropDown}>\n                {message}\n                </button> \n\n                {isOpen && (\n                    <ul className=\"dropdown-menu\">\n                        {props.options.map((option, index) => (\n                            <div className=\"element\" key={index}>\n                                <button type=\"button\" className=\"element-button\" onClick={() => changeMessage(option)}>{option}</button>\n                            </div>\n                        ))}\n                    </ul>\n                )}\n                <input type=\"hidden\" name={props.name} value={props.message} />\n            </div>\n        </div>\n        \n    );\n}\n\nexport default Dropdown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}